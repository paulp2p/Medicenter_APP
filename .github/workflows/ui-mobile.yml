name: Android UI (Windows)

on:
  workflow_dispatch:

jobs:
  ui-tests-win:
    runs-on: windows-latest
    timeout-minutes: 90
    env:
      PYTHONUNBUFFERED: "1"
      APPIUM_LOG_LEVEL: "info"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        shell: pwsh
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Install Appium 3 + Android driver
        shell: pwsh
        run: |
          npm i -g appium@next
          appium -v
          appium driver install uiautomator2

      - name: Install rclone (Windows)
        shell: pwsh
        run: choco install rclone -y --no-progress

      - name: Download APK from Drive (rclone + SA, path)
        shell: pwsh
        env:
          RCLONE_CONFIG_GDRIVE_TYPE: drive
          RCLONE_CONFIG_GDRIVE_SCOPE: drive
          RCLONE_CONFIG_GDRIVE_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GDRIVE_SA_JSON }}
          RCLONE_CONFIG_GDRIVE_ROOT_FOLDER_ID: ${{ secrets.GDRIVE_ROOT_FOLDER_ID }}
          GDRIVE_FILE_PATH: ${{ secrets.GDRIVE_FILE_PATH }}   # ej: medicenter_app.apk
        run: |
          $destDir = Join-Path $env:RUNNER_TEMP "apk"
          New-Item -ItemType Directory -Force -Path $destDir | Out-Null
          $dest = Join-Path $destDir (Split-Path $env:GDRIVE_FILE_PATH -Leaf)
          rclone copyto "gdrive:$env:GDRIVE_FILE_PATH" "$dest" -P
          "APP_PATH=$dest" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Get-Item $dest | Format-List Name,Length,FullName

      # ===== ANDROID SDK + AVD (Windows) =====
      - name: Setup Android cmdline-tools
        uses: android-actions/setup-android@v3

      - name: Install SDK packages (api 30 + emulator + system image)
        shell: pwsh
        run: |
          $Env:ANDROID_SDK_ROOT = $Env:ANDROID_HOME  # este action exporta ANDROID_HOME
          $sdkman = Join-Path $Env:ANDROID_HOME "cmdline-tools\latest\bin\sdkmanager.bat"
          & $sdkman --version
          echo "y" | & $sdkman --licenses
          & $sdkman "platform-tools" "platforms;android-30" "emulator" "system-images;android-30;google_apis;x86_64"

      - name: Create AVD (Pixel 5 API 30)
        shell: pwsh
        run: |
          $Env:ANDROID_SDK_ROOT = $Env:ANDROID_HOME
          $avdman = Join-Path $Env:ANDROID_HOME "cmdline-tools\latest\bin\avdmanager.bat"
          $name = "ci_pixel5_api30"
          # -f para forzar recreaci칩n si ya existe
          echo "no" | & $avdman create avd -n $name -k "system-images;android-30;google_apis;x86_64" -d "pixel_5" -f

      - name: Boot emulator (headless / no-accel) + run tests
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $Env:ANDROID_SDK_ROOT = $Env:ANDROID_HOME
          $emu = Join-Path $Env:ANDROID_HOME "emulator\emulator.exe"
          $adb = Join-Path $Env:ANDROID_HOME "platform-tools\adb.exe"
          $avdName = "ci_pixel5_api30"

          # Lanzar emulador sin aceleraci칩n (WHPX/Hyper-V no disponible en runners)
          $args = @(
            "-avd", $avdName,
            "-no-window", "-no-snapshot", "-no-boot-anim",
            "-gpu", "swiftshader_indirect",
            "-noaudio",
            "-skin", "1080x2340",
            "-dpi-device", "440",
            "-ports", "5554,5555",
            "-no-accel"
          )
          Start-Process -FilePath $emu -ArgumentList $args -NoNewWindow

          # Esperar boot (hasta 15 min en Windows/no-accel)
          $max = 900; $i = 0
          while ($i -lt $max) {
            $out = & $adb -s emulator-5554 shell getprop sys.boot_completed 2>$null
            if ($out -match "1") { break }
            Start-Sleep -Seconds 1; $i++
          }
          if ($i -ge $max) { throw "Timeout esperando boot del emulador" }

          # Verificar tama침o/densidad
          $sz  = (& $adb shell wm size    | Out-String).Trim().Split(":")[1].Trim()
          $dpi = (& $adb shell wm density | Out-String).Trim().Split()[-1]
          Write-Host "Screen: $sz  Density: $dpi"
          if ($sz -ne "1080x2340") { throw "Pantalla no coincide: $sz" }
          if ($dpi -ne "440")      { throw "Densidad no coincide: $dpi" }

          # Levantar Appium en background
          Start-Process -FilePath "appium" -ArgumentList "--log-level","${env:APPIUM_LOG_LEVEL}" -RedirectStandardOutput "appium.log" -RedirectStandardError "appium.log"
          # Esperar puerto 4723
          $t=0; while (-not (Get-NetTCPConnection -LocalPort 4723 -ErrorAction SilentlyContinue)) {
            Start-Sleep -Seconds 1; $t++; if ($t -gt 60) { throw "Appium no inici칩" }
          }

          # Ejecutar tests
          New-Item -ItemType Directory -Force -Path "allure-results" | Out-Null
          python -m behave -f allure_behave.formatter:AllureFormatter -o allure-results ./features

        finally:
          # siempre intentar apagar el emulador
          $adb = Join-Path $Env:ANDROID_HOME "platform-tools\adb.exe"
          & $adb -s emulator-5554 emu kill 2>$null | Out-Null

      # ===== Artefactos =====
      - name: Upload allure-results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-artifacts
          path: |
            appium.log
            **/screenshots/**
