name: Android UI (Appium)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  ui-tests:
    runs-on: ubuntu-latest
    # timeout-minutes: 120
    env:
      PYTHONUNBUFFERED: "1"
      APPIUM_LOG_LEVEL: "info"
      DISABLE_MOCK_SMS: "1"
      CI_FIXED_OTP: "000000"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          
      - name: Ensure report formatters
        run: |
          pip show allure-behave >/dev/null 2>&1 || pip install -U allure-behave
          pip show behave-html-formatter >/dev/null 2>&1 || pip install -U behave-html-formatter

      - name: Install Appium 3 + Android driver
        run: |
          npm i -g appium@next
          appium -v
          appium driver install uiautomator2

      - name: Install rclone
        run: curl -fsSL https://rclone.org/install.sh | sudo bash

      - name: Download APK from Drive (rclone + SA, path)
        env:
          RCLONE_CONFIG_GDRIVE_TYPE: drive
          RCLONE_CONFIG_GDRIVE_SCOPE: drive
          RCLONE_CONFIG_GDRIVE_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GDRIVE_SA_JSON }}
          RCLONE_CONFIG_GDRIVE_ROOT_FOLDER_ID: ${{ secrets.GDRIVE_ROOT_FOLDER_ID }}
          GDRIVE_FILE_PATH: ${{ secrets.GDRIVE_FILE_PATH }}
        run: |
          set -euo pipefail
          mkdir -p "$RUNNER_TEMP/apk"
          SRC="gdrive:${GDRIVE_FILE_PATH}"
          DEST="$RUNNER_TEMP/apk/$(basename "${GDRIVE_FILE_PATH}")"
          echo "Copiando: $SRC -> $DEST"
          rclone copyto "$SRC" "$DEST" -P
          test -f "$DEST"
          echo "APP_PATH=$DEST" >> $GITHUB_ENV
          ls -lh "$DEST"

      - name: Ensure lsof
        run: sudo apt-get update && sudo apt-get install -y lsof

      # ---- activa y ejecuta emulador + tests ----
      - name: Run emulator (mínimo API 29) + tests (Behave)
        uses: ReactiveCircus/android-emulator-runner@v2
        with:
          api-level: 29
          arch: x86
          target: default
          avd-name: ci_api29_min
          emulator-port: 5554
          force-avd-creation: true
          disable-animations: true
          disable-linux-hw-accel: true
          emulator-boot-timeout: 1800
          emulator-options: "-no-window -no-snapshot -no-boot-anim -gpu swiftshader_indirect -noaudio -accel off -wipe-data -no-metrics"
          pre-emulator-launch-script: |
            adb kill-server || true
            rm -rf ~/.android/avd/ci_api29_min.avd || true
          script: |
            set -eu
            appium --log-level ${APPIUM_LOG_LEVEL:-info} > appium.log 2>&1 &
            i=0; while ! lsof -i :4723 >/dev/null 2>&1; do i=$((i+1)); [ $i -ge 90 ] && { echo "Appium no inició"; exit 1; }; sleep 1; done
            i=0; while [ "$(adb -s emulator-5554 shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')" != "1" ]; do i=$((i+1)); [ $i -ge 900 ] && { echo "Timeout boot"; exit 1; }; sleep 1; done
            i=0; while ! adb -s emulator-5554 shell cmd package list packages >/dev/null 2>&1; do i=$((i+1)); [ $i -ge 300 ] && { echo "Timeout esperando PackageManager"; exit 1; }; sleep 1; done
            adb install -r -g "$APP_PATH" || { echo "adb install FAILED"; adb logcat -d | tail -n 400 > logcat_install.txt || true; exit 1; }
            mkdir -p allure-results
            behave -f allure_behave.formatter:AllureFormatter -o allure-results ./features

      - name: Inspect Allure results (debug)
        if: always()
        run: |
          echo "PWD=$(pwd)"
          test -d allure-results && ls -lah allure-results || echo "allure-results NO existe"
          echo "Conteo de archivos:"
          find allure-results -maxdepth 1 -type f | wc -l

      - name: Upload artifacts (logs + allure results)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-artifacts
          path: |
            appium.log
            logcat_install.txt
            allure-results
            **/screenshots/**
          if-no-files-found: warn

      - name: Generate Allure HTML
        if: always()
        run: |
          if [ ! -d allure-results ] || [ -z "$(ls -A allure-results)" ]; then
            echo "No hay resultados en allure-results. Saltando generación."
            mkdir -p allure-report
            echo "<h1>Sin resultados</h1>" > allure-report/index.html
          else
            sudo apt-get update && sudo apt-get install -y unzip > /dev/null
            curl -sL -o allure.zip https://repo1.maven.org/maven2/io/qameta/allure/allure-commandline/2.25.0/allure-commandline-2.25.0.zip
            unzip -q allure.zip -d $RUNNER_TEMP
            $RUNNER_TEMP/allure-2.25.0/bin/allure generate allure-results -o allure-report --clean
          fi

      - name: Upload Allure report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: Upload raw Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results


       
