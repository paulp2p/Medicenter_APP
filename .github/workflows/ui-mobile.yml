name: Android UI (Appium) - Simple

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  ui-tests:
    runs-on: ubuntu-latest
    env:
      PYTHONUNBUFFERED: "1"
      APPIUM_LOG_LEVEL: "info"
      # Si tu framework toma caps por env, puedes leer estas:
      APPIUM_LANGUAGE: "en"
      APPIUM_LOCALE: "US"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install tools (pip + OS + rclone + Appium)
        run: |
          set -euo pipefail
          python -m pip install -U pip
          pip install -r requirements.txt allure-behave
          sudo apt-get update
          sudo apt-get install -y lsof unzip zip
          curl -fsSL https://rclone.org/install.sh | sudo bash
          npm i -g appium@next
          appium -v
          appium driver install uiautomator2

      - name: Download APK from Drive (rclone + Service Account)
        env:
          RCLONE_CONFIG_GDRIVE_TYPE: drive
          RCLONE_CONFIG_GDRIVE_SCOPE: drive
          RCLONE_CONFIG_GDRIVE_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GDRIVE_SA_JSON }}
          RCLONE_CONFIG_GDRIVE_ROOT_FOLDER_ID: ${{ secrets.GDRIVE_ROOT_FOLDER_ID }}
          GDRIVE_FILE_PATH: ${{ secrets.GDRIVE_FILE_PATH }}
        run: |
          set -euo pipefail
          mkdir -p "$RUNNER_TEMP/apk"
          SRC="gdrive:${GDRIVE_FILE_PATH}"
          DEST="$RUNNER_TEMP/apk/$(basename "${GDRIVE_FILE_PATH}")"
          echo "Copiando: $SRC -> $DEST"
          rclone copyto "$SRC" "$DEST" -P
          test -f "$DEST"
          echo "APP_PATH=$DEST" >> $GITHUB_ENV
          ls -lh "$DEST"

      - name: Run emulator (API 29, Google APIs) + tests
        uses: ReactiveCircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: google_apis
          arch: x86
          avd-name: ci_api29_googleapis_x86
          force-avd-creation: true
          disable-animations: true
          emulator-boot-timeout: 1800
          # Emulador en inglés y sin snapshots
          emulator-options: >-
            -no-window -no-boot-anim -noaudio -gpu swiftshader_indirect
            -no-snapshot -no-snapshot-save -wipe-data -no-metrics
            -prop persist.sys.locale=en-US
            -prop persist.sys.language=en
            -prop persist.sys.country=US
          script: |
            set -euo pipefail

            # Levantar Appium y esperar puerto 4723
            appium --log-level ${APPIUM_LOG_LEVEL:-info} > appium.log 2>&1 &
            for i in $(seq 1 90); do lsof -i :4723 >/dev/null 2>&1 && break || sleep 1; done
            lsof -i :4723 >/dev/null 2>&1 || { echo "Appium no inició"; exit 1; }

            # Reforzar locale (por si los props no alcanzan)
            adb shell "cmd locale set en-US" || true
            # Android 13+: idioma por app (no rompe en 29, ignora)
            adb shell "cmd activity set-app-language com.siltium.medicenter en-US" || true

            # Instalar APK
            adb install -r -g "$APP_PATH" || {
              echo "adb install FAILED"
              adb logcat -d | tail -n 800 > logcat_install.txt || true
              exit 1
            }

            # Smoke launch opcional (no requerido)
            adb shell am start -W -n "com.siltium.medicenter/.MainActivity" || true
            sleep 3

            # Ejecutar tests → Allure results
            mkdir -p allure-results
            behave -f allure_behave.formatter:AllureFormatter -o allure-results ./features

      - name: Generate Allure HTML + ZIP
        if: always()
        run: |
          if [ -d allure-results ] && [ -n "$(ls -A allure-results || true)" ]; then
            curl -sL -o allure.zip https://repo1.maven.org/maven2/io/qameta/allure/allure-commandline/2.25.0/allure-commandline-2.25.0.zip
            unzip -q allure.zip -d $RUNNER_TEMP
            $RUNNER_TEMP/allure-2.25.0/bin/allure generate allure-results -o allure-report --clean
          else
            mkdir -p allure-report
            echo "<h1>Sin resultados</h1>" > allure-report/index.html
          fi
          zip -r allure-report.zip allure-report

      - name: Upload Allure ZIP
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-zip
          path: allure-report.zip
          if-no-files-found: error
