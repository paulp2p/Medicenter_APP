name: Android UI (Appium) - Windows Simple

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  ui-tests:
    # Recomendado: Windows self-hosted con Hyper-V/WHPX habilitado
    runs-on: [self-hosted, Windows]
    env:
      PYTHONUNBUFFERED: "1"
      APPIUM_LOG_LEVEL: "info"
      APPIUM_LANGUAGE: "en"
      APPIUM_LOCALE: "US"
      ANDROID_SDK_ROOT: "C:\\Android\\Sdk"
      ANDROID_HOME: "C:\\Android\\Sdk"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install tools (pip + rclone + Appium)
        shell: pwsh
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt allure-behave
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            iwr https://community.chocolatey.org/install.ps1 -UseBasicParsing | iex
          }
          choco install rclone -y --no-progress
          npm i -g appium@next
          appium -v
          appium driver install uiautomator2

      - name: Download APK from Drive (rclone + Service Account)
        shell: pwsh
        env:
          RCLONE_CONFIG_GDRIVE_TYPE: drive
          RCLONE_CONFIG_GDRIVE_SCOPE: drive
          RCLONE_CONFIG_GDRIVE_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GDRIVE_SA_JSON }}
          RCLONE_CONFIG_GDRIVE_ROOT_FOLDER_ID: ${{ secrets.GDRIVE_ROOT_FOLDER_ID }}
          GDRIVE_FILE_PATH: ${{ secrets.GDRIVE_FILE_PATH }}
        run: |
          $apkDir = Join-Path $env:RUNNER_TEMP "apk"
          New-Item -ItemType Directory -Force -Path $apkDir | Out-Null
          $src = "gdrive:$env:GDRIVE_FILE_PATH"
          $dest = Join-Path $apkDir (Split-Path -Leaf $env:GDRIVE_FILE_PATH)
          Write-Host "Copiando $src -> $dest"
          rclone copyto $src $dest -P
          if (!(Test-Path $dest)) { throw "APK no encontrada en $dest" }
          echo "APP_PATH=$dest" | Out-File -FilePath $env:GITHUB_ENV -Append
          Get-ChildItem $dest | Format-List *

      - name: Install Android SDK + Create AVD (API 29, Google APIs)
        shell: pwsh
        run: |
          $sdkRoot = $env:ANDROID_SDK_ROOT
          New-Item -ItemType Directory -Force -Path $sdkRoot | Out-Null
          $cmdZip = Join-Path $env:TEMP "cmdtools.zip"
          Invoke-WebRequest -Uri "https://dl.google.com/android/repository/commandlinetools-win-9477386_latest.zip" -OutFile $cmdZip
          Expand-Archive -Path $cmdZip -DestinationPath (Join-Path $sdkRoot "cmdline-tools") -Force
          # Reacomodar a ...\cmdline-tools\latest\bin
          if (Test-Path (Join-Path $sdkRoot "cmdline-tools\cmdline-tools")) {
            Move-Item (Join-Path $sdkRoot "cmdline-tools\cmdline-tools") (Join-Path $sdkRoot "cmdline-tools\latest") -Force
          }
          $env:Path = "$sdkRoot\platform-tools;$sdkRoot\cmdline-tools\latest\bin;$sdkRoot\emulator;$env:Path"

          # Licencias + componentes
          cmd /c "echo y | `"$sdkRoot\cmdline-tools\latest\bin\sdkmanager.bat`" --licenses"
          cmd /c "`"$sdkRoot\cmdline-tools\latest\bin\sdkmanager.bat`" --install platform-tools emulator `"platforms;android-29`" `"system-images;android-29;google_apis;x86`""

          # Crear AVD
          cmd /c "echo no | `"$sdkRoot\cmdline-tools\latest\bin\avdmanager.bat`" create avd -n ci_api29 -k `"system-images;android-29;google_apis;x86`" --abi google_apis/x86 --device pixel"

      - name: Launch Emulator (en-US) + Run Tests + Kill Appium + Allure
        shell: pwsh
        run: |
          $sdkRoot = $env:ANDROID_SDK_ROOT
          $env:Path = "$sdkRoot\platform-tools;$sdkRoot\emulator;$env:Path"

          # Lanzar emulador sin ventana y en inglés
          Start-Process -FilePath "$sdkRoot\emulator\emulator.exe" -ArgumentList @(
            "-avd","ci_api29",
            "-no-window","-no-boot-anim","-noaudio","-gpu","swiftshader_indirect",
            "-no-snapshot","-no-snapshot-save","-wipe-data",
            "-port","5554",
            "-prop","persist.sys.locale=en-US",
            "-prop","persist.sys.language=en",
            "-prop","persist.sys.country=US"
          ) -NoNewWindow

          # Esperar boot
          $ok = $false
          for ($i=0; $i -lt 900; $i++) {
            $boot = & "$sdkRoot\platform-tools\adb.exe" -s emulator-5554 shell getprop sys.boot_completed 2>$null
            if ($boot -match "1") { $ok = $true; break }
            Start-Sleep -Seconds 1
          }
          if (-not $ok) { throw "Timeout esperando boot del emulador" }

          # Appium en background con log
          $appiumLog = "appium.log"
          $appiumProc = Start-Process -FilePath "appium" -ArgumentList "--log-level $($env:APPIUM_LOG_LEVEL)" -NoNewWindow -RedirectStandardOutput $appiumLog -RedirectStandardError $appiumLog -PassThru

          # Esperar puerto 4723
          $ready = $false
          for ($i=0; $i -lt 90; $i++) {
            try { if ((Test-NetConnection -ComputerName "127.0.0.1" -Port 4723).TcpTestSucceeded) { $ready = $true; break } } catch {}
            Start-Sleep -Seconds 1
          }
          if (-not $ready) { throw "Appium no inició" }

          # Forzar locale por si acaso (ignora si no aplica)
          & "$sdkRoot\platform-tools\adb.exe" -s emulator-5554 shell "cmd locale set en-US" | Out-Null
          & "$sdkRoot\platform-tools\adb.exe" -s emulator-5554 shell "cmd activity set-app-language com.siltium.medicenter en-US" | Out-Null

          # Instalar APK
          & "$sdkRoot\platform-tools\adb.exe" install -r -g "$env:APP_PATH"; if ($LASTEXITCODE -ne 0) {
            & "$sdkRoot\platform-tools\adb.exe" logcat -d | Select-Object -Last 800 | Out-File -FilePath "logcat_install.txt" -Encoding utf8
            throw "adb install FAILED"
          }

          # Smoke launch (opcional)
          & "$sdkRoot\platform-tools\adb.exe" shell am start -W -n "com.siltium.medicenter/.MainActivity" | Out-Null
          Start-Sleep -Seconds 3

          # Run Behave → Allure results
          New-Item -ItemType Directory -Force -Path "allure-results" | Out-Null
          python -m behave -f allure_behave.formatter:AllureFormatter -o allure-results ./features

          # Cerrar Appium limpio antes del teardown
          if ($appiumProc) {
            Stop-Process -Id $appiumProc.Id -Force -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 1
          }

          # Generar Allure HTML
          $alZip = Join-Path $env:RUNNER_TEMP "allure.zip"
          Invoke-WebRequest -Uri "https://repo1.maven.org/maven2/io/qameta/allure/allure-commandline/2.25.0/allure-commandline-2.25.0.zip" -OutFile $alZip
          Expand-Archive -Path $alZip -DestinationPath $env:RUNNER_TEMP -Force
          & "$env:RUNNER_TEMP\allure-2.25.0\bin\allure.bat" generate allure-results -o allure-report --clean

          # ZIP del reporte
          if (Test-Path "allure-report") {
            if (Test-Path "allure-report.zip") { Remove-Item "allure-report.zip" -Force }
            Compress-Archive -Path "allure-report\*" -DestinationPath "allure-report.zip"
          } else {
            New-Item -ItemType Directory -Force -Path "allure-report" | Out-Null
            Set-Content -Path "allure-report\index.html" -Value "<h1>Sin resultados</h1>"
            Compress-Archive -Path "allure-report\*" -DestinationPath "allure-report.zip"
          }

      - name: Upload Allure ZIP
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-zip
          path: allure-report.zip
          if-no-files-found: error

      - name: Upload logs (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs
          path: |
            appium.log
            logcat_install.txt
          if-no-files-found: warn
